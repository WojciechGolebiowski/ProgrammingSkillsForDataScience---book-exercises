# Load libraries so they are available
library("shiny")
# A `titlePanel()` with the text "Income Inequality"
intro_panel <- titlePanel("Introduction")
?a
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
ui <- navbarPage(intro_panel, growth_panel)
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source(app_ui.R)
setwd("C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-4")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source(app_ui.R)
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
runApp()
?navbarPage
runApp()
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
View(income_growth)
colnames(income_growth)
runApp()
# Load libraries so they are available
library("shiny")
# UI for scatterplot
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
colnames(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
mpg_names <- colnames(mpg)
?selectInput
runApp('C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-5')
runApp('C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-5')
output$scatter <- renderPlot({
ggplot(mpg) +
geom_point(mapping = aes(x = input$x_var, y = input$y_var, color = input$col1, size = input$size))
})
runApp('C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-5')
ggplot(mpg) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var, color = input$col1, size = input$size))
runApp('C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-5')
runApp('C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-5')
runApp('C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-5')
# server.R
library(dplyr)
library(shiny)
library(plotly)
# Read in data
source('./scripts/build_map.R')
setwd("C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-19-exercises/exercise-6")
# Read in data
source('./scripts/build_map.R')
# Read in data
source('./scripts/build_map.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
colnames(datajoined)
colnames(joined_data)
runApp()
runApp()
runApp()
clc
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = ui, server = server)
View(joined_data)
View(joined_data)
runApp()
runApp()
