# load relevant libraries
library("httr")
library("jsonlite")
setwd("C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source(apikey.R)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Grand Budapest Hotel"
base_URI <- "https://api.nytimes.com/svc/movies/v2/"
RESOURCE <- "/reviews/search.json"
# load relevant libraries
library("httr")
library("jsonlite")
?GET
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(uri = paste(base_URI,RESOURCE),query = movie_name, api-key = nty_apikey)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = movie_name, api-key = nty_apikey)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, api-key = nty_apikey))
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
Grand <- content(Grand)
Grand <- content(Grand, type = "text")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
Grand <- content(Grand, type = "text")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
Grand <- content(Grand, type = "text")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
View(Grand)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Star Wars"
base_URI <- "https://api.nytimes.com/svc/movies/v2/"
RESOURCE <- "/reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
Grand <- content(Grand, type = "text")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Hobbit"
base_URI <- "https://api.nytimes.com/svc/movies/v2/"
RESOURCE <- "/reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
View(Grand)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "godfather"
base_URI <- "https://api.nytimes.com/svc/movies/v2/"
RESOURCE <- "reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
View(Grand)
Grand <- content(Grand, type = "text")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Pulp Fiction"
base_URI <- "https://api.nytimes.com/svc/movies/v2/"
RESOURCE <- "reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste0(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
Grand <- content(Grand, type = "text")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Grand Budapest Hotel"
base_URI <- "https://api.nytimes.com/svc/movies/v2/"
RESOURCE <- "reviews/search.json"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
Grand <- GET(paste0(base_URI,RESOURCE),query = list(query = movie_name, "api-key" = nty_apikey))
Grand <- content(Grand, type = "text")
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(Grand)
is.list(Grand)
str(Grand)
GrandHotel <- fromJSON(Grand)
View(GrandHotel)
GrandHotel <- GrandHotel$results
View(GrandHotel)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(GrandHotel)
str(GrandHotel)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(GrandHotel)
library(dplyr)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
reviews %>% arrange(publication_date)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(GrandHotel)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
reviews %>% arrange(publication_date) %>% select(headline, summary_short, link.url)
# Create a list of the three pieces of information from above.
# Print out the list.
listGrand <- list(headline = reviews$headline,
summary = reviews$summary_short,
link = reviews$link.url)
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
