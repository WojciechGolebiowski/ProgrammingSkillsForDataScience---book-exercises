setwd("C:/Users/woote/OneDrive/Pulpit/R/book-exercises/chapter-14-exercises/exercise-2")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source(apikey.R)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Pulp Fiction"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
base_URI <- "https://api.nytimes.com/svc/movies/v2"
resource <- "/reviews/search.json"
# load relevant libraries
library("httr")
library("jsonlite")
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
ResGET <- GET(paste0(base_uri,resource))
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
ResGET <- GET(paste0(base_URI,resource))
View(ResGET)
params <- list(api-key = nty_apikey, query = movie_name)
params <- list("api-key" = nty_apikey, query = movie_name)
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
ResGET <- GET(paste0(base_URI,resource),query = params)
ResGET
print(ResGET)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
PulpContent <- content(ResGET)
print(PulpContent)
names(PulpContent)
Pulp <- jsonlite::fromJSON(PulpContent)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
PulpContent <- content(ResGET, type = "text")
print(PulpContent)
names(PulpContent)
print(PulpContent)
Pulp <- jsonlite::fromJSON(PulpContent)
print(Pulp)
names(Pulp)
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(Pulp)
is.list(Pulp)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
str(Pulp)
names(Pulp)
Results <- Pulp$results
View(Results)
Results$link
Results$link.url
Results$link$url
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(Results)
View(reviews)
View(Results)
View(reviews)
View(Results)
max(reviews$publication_date)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
Recent <- reviews[max(reviews$publication_date) == reviews$publication_date,]
Headline <- Recent$headline
ShortSum <- Recent$summary_short
Link <- Recent$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
ListaDanych <- list("Headline" = Headline, "Short Summary" = ShortSum, "Link" = Link)
View(ListaDanych)
